name: Auto Tag and Release

on:
  push:
    branches:
      - main
      - develop
      - beta

jobs:
  auto-tag:
    name: Create and Push Latest Version Tag
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      tag_name: ${{ steps.create_tag.outputs.tag_name }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history and tags

      - name: Get branch and latest tag
        id: get_latest_tag
        run: |
          # Get current branch name
          BRANCH_NAME=${GITHUB_REF#refs/heads/}
          echo "Branch name: $BRANCH_NAME"
          echo "branch_name=$BRANCH_NAME" >> $GITHUB_OUTPUT
          
          # Get the latest tag based on branch type
          case $BRANCH_NAME in
            "main")
              # For main branch, get latest release tag (v*.*.*)
              LATEST_TAG=$(git tag --sort=-version:refname | grep -E "^v[0-9]+\.[0-9]+\.[0-9]+$" | head -n1 || echo "v0.0.0")
              ;;
            "develop")
              # For develop branch, get latest dev tag (v*.*.*-dev.*)
              # First get the latest main version to base dev version on
              LATEST_MAIN_TAG=$(git tag --sort=-version:refname | grep -E "^v[0-9]+\.[0-9]+\.[0-9]+$" | head -n1 || echo "v0.0.0")
              LATEST_DEV_TAG=$(git tag --sort=-version:refname | grep -E "^v[0-9]+\.[0-9]+\.[0-9]+-dev\.[0-9]+$" | head -n1 || echo "")
              
              # If no dev tags exist, base on main version
              if [[ -z "$LATEST_DEV_TAG" ]]; then
                LATEST_TAG="$LATEST_MAIN_TAG"
              else
                LATEST_TAG="$LATEST_DEV_TAG"
              fi
              ;;
            "beta")
              # For beta branch, get latest beta tag (v*.*.*-beta.*)
              LATEST_MAIN_TAG=$(git tag --sort=-version:refname | grep -E "^v[0-9]+\.[0-9]+\.[0-9]+$" | head -n1 || echo "v0.0.0")
              LATEST_BETA_TAG=$(git tag --sort=-version:refname | grep -E "^v[0-9]+\.[0-9]+\.[0-9]+-beta\.[0-9]+$" | head -n1 || echo "")
              
              # If no beta tags exist, base on main version
              if [[ -z "$LATEST_BETA_TAG" ]]; then
                LATEST_TAG="$LATEST_MAIN_TAG"
              else
                LATEST_TAG="$LATEST_BETA_TAG"
              fi
              ;;
            *)
              echo "Unsupported branch: $BRANCH_NAME"
              exit 1
              ;;
          esac
          
          echo "Latest tag: $LATEST_TAG"
          echo "latest_tag=$LATEST_TAG" >> $GITHUB_OUTPUT

      - name: Bump version
        id: bump_version
        run: |
          # Extract version components
          LATEST_TAG=${{ steps.get_latest_tag.outputs.latest_tag }}
          BRANCH_NAME=${{ steps.get_latest_tag.outputs.branch_name }}
          
          echo "Latest tag: $LATEST_TAG"
          echo "Branch name: $BRANCH_NAME"

          case $BRANCH_NAME in
            "main")
              # Remove 'v' prefix
              VERSION=${LATEST_TAG#v}
              # Split into major, minor, patch
              IFS='.' read -r MAJOR MINOR PATCH <<< "$VERSION"
              # Increment patch version
              PATCH=$((PATCH + 1))
              # Create new version
              NEW_VERSION="v$MAJOR.$MINOR.$PATCH"
              ;;
            "develop")
              if [[ $LATEST_TAG =~ ^v([0-9]+)\.([0-9]+)\.([0-9]+)-dev\.([0-9]+)$ ]]; then
                # Existing dev tag - increment dev number
                BASE_VERSION="${BASH_REMATCH[1]}.${BASH_REMATCH[2]}.${BASH_REMATCH[3]}"
                DEV_NUM=${BASH_REMATCH[4]}
                DEV_NUM=$((DEV_NUM + 1))
                NEW_VERSION="v$BASE_VERSION-dev.$DEV_NUM"
              elif [[ $LATEST_TAG =~ ^v([0-9]+)\.([0-9]+)\.([0-9]+)$ ]]; then
                # Main branch tag - create first dev tag
                MAJOR=${BASH_REMATCH[1]}
                MINOR=${BASH_REMATCH[2]}
                PATCH=${BASH_REMATCH[3]}
                # Increment minor version for dev branch
                MINOR=$((MINOR + 1))
                NEW_VERSION="v$MAJOR.$MINOR.0-dev.1"
              else
                # Fallback to default dev tag
                NEW_VERSION="v0.4.0-dev.1"
              fi
              ;;
            "beta")
              if [[ $LATEST_TAG =~ ^v([0-9]+)\.([0-9]+)\.([0-9]+)-beta\.([0-9]+)$ ]]; then
                # Existing beta tag - increment beta number
                BASE_VERSION="${BASH_REMATCH[1]}.${BASH_REMATCH[2]}.${BASH_REMATCH[3]}"
                BETA_NUM=${BASH_REMATCH[4]}
                BETA_NUM=$((BETA_NUM + 1))
                NEW_VERSION="v$BASE_VERSION-beta.$BETA_NUM"
              elif [[ $LATEST_TAG =~ ^v([0-9]+)\.([0-9]+)\.([0-9]+)$ ]]; then
                # Main branch tag - create first beta tag
                MAJOR=${BASH_REMATCH[1]}
                MINOR=${BASH_REMATCH[2]}
                PATCH=${BASH_REMATCH[3]}
                # Increment minor version for beta branch
                MINOR=$((MINOR + 1))
                NEW_VERSION="v$MAJOR.$MINOR.0-beta.1"
              else
                # Fallback to default beta tag
                NEW_VERSION="v0.4.0-beta.1"
              fi
              ;;
          esac
          
          echo "New version: $NEW_VERSION"
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: Clean up invalid tags
        run: |
          # Remove invalid tags that don't follow semver format
          INVALID_TAGS=$(git tag -l | grep -E "^v-dev\.[0-9]+$" || true)
          if [[ -n "$INVALID_TAGS" ]]; then
            echo "Found invalid tags: $INVALID_TAGS"
            for tag in $INVALID_TAGS; do
              echo "Deleting invalid tag: $tag"
              git tag -d $tag || true
              git push origin :refs/tags/$tag || true
            done
          fi

      - name: Create and push tag
        id: create_tag
        run: |
          NEW_VERSION=${{ steps.bump_version.outputs.new_version }}
          
          # Check if tag already exists
          if git rev-parse "refs/tags/$NEW_VERSION" >/dev/null 2>&1; then
            echo "Tag $NEW_VERSION already exists, skipping tag creation"
            echo "tag_name=$NEW_VERSION" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git tag -a $NEW_VERSION -m "Release $NEW_VERSION"
          git push origin $NEW_VERSION
          echo "tag_name=$NEW_VERSION" >> $GITHUB_OUTPUT

  # This job will run after the auto-tag job completes
  release:
    name: Build and Release Kotlin JAR
    needs: auto-tag
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history and tags
          ref: ${{ needs.auto-tag.outputs.tag_name }}

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Run tests
        run: ./gradlew test

      - name: Build Shadow JAR
        run: ./gradlew shadowJar

      - name: Prepare release artifacts
        run: |
          TAG_NAME=${{ needs.auto-tag.outputs.tag_name }}
          mkdir -p release
          cp build/libs/keruta-agent-1.0.0-all.jar release/keruta-agent-${TAG_NAME}.jar
          cp build/libs/keruta-agent-1.0.0-all.jar release/keruta-agent-latest.jar

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.auto-tag.outputs.tag_name }}
          name: Release ${{ needs.auto-tag.outputs.tag_name }}
          draft: false
          prerelease: ${{ contains(needs.auto-tag.outputs.tag_name, '-dev.') || contains(needs.auto-tag.outputs.tag_name, '-beta.') }}
          files: |
            release/keruta-agent-${{ needs.auto-tag.outputs.tag_name }}.jar
            release/keruta-agent-latest.jar
          body: |
            ## Changes in ${{ needs.auto-tag.outputs.tag_name }}
            
            ### Kotlin Version
            - Migrated from Go to Kotlin/JVM
            - Uses Gradle for build management
            - Maintains compatibility with original Go version API
            
            ### Dependencies
            - Kotlin 1.9.10
            - Java 17 runtime required
            - All original functionality preserved
            
            ### Usage
            ```bash
            java -jar keruta-agent-${{ needs.auto-tag.outputs.tag_name }}.jar
            ```
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
